import glob
import pandas as pd
import sys
import csv
csv.field_size_limit(9999999)
class mybidict(dict):
    def __init__(self, *args, **kwargs):
        super(mybidict, self).__init__(*args, **kwargs)
        self.inverse = {}
        for key, value in self.items():
            self.inverse.setdefault(value,[]).append(key)

    def __setitem__(self, key, value):
        if key in self:
            self.inverse[self[key]].remove(key)
        super(mybidict, self).__setitem__(key, value)
        self.inverse.setdefault(value,[]).append(key)

    def __delitem__(self, key):
        self.inverse.setdefault(self[key],[]).remove(key)
        if self[key] in self.inverse and not self.inverse[self[key]]:
            del self.inverse[self[key]]
        super(mybidict, self).__delitem__(key)

def update_reps(row, df: pd.DataFrame):
    reps = row["rep"].split("::")
    for r in reps:
        df = df.append({"event": row["URL for node"], "rep": r}, ignore_index=True)


def populate_events():
    alldfs = []
    for f in glob.glob("data/*/*tsmworse-filtered-avg-wosan-100.prop.csv"):
        if f.split("\\")[1] not in open("nosqlinjection.txt").read():
            continue
        print(f)
        df = pd.read_csv(f, engine='python')
        df["dfnode"] = df["URL for node"] + df["rep"]
        df["reps"] = df["rep"].str.split("::")
        #print(len(df["reps"]))
        df = df.explode("reps")
        #print(len(df["reps"]))
        alldfs = alldfs + [df]
        #df.apply(lambda x: update_reps(x, df), axis=1)
    return pd.concat(alldfs)

def mark_nosql_sinks(alldf: pd.DataFrame):
    for f in glob.glob(r"C:\Users\saika\projects\ql\constraintsolving\data\*\*sinks-nosql.prop.csv"):
        df = pd.read_csv(f)
        df = df[df["q"] == "NosqlInjectionWorse"]
        alldf.loc[alldf["URL for node"].isin(list(df["URL for pnd"])), "isnosql"] = True


alldf = populate_events()
alldf["isnosql"] = False
mark_nosql_sinks(alldf)
all_reps = set(alldf[alldf["isnosql"] == True]["reps"])
print("Unique nosql reps", len(all_reps))

#tmp = ['(parameter 0 (return (member findOne (member countryFlags *))))', '(parameter 0 (return (member update (return (member getModel *)))))', '(parameter 1 (return (member update (member systems *))))', '(member newstudentID (member body *))', '(parameter 0 (return (member find (member model (member user *)))))', '(parameter 0 (return (member update (parameter clientt *))))', '(parameter 0 (return (member update (parameter Obj (member update *)))))', '(parameter 0 (return (member find (member Skin *))))', '(parameter 1 (return (member update (member Payment *))))', '(parameter 0 (return (member remove (member products *))))', '(parameter 0 (return (member update (member Service *))))', '(parameter 0 (return (member countDocuments (member Ipv6ZoneModel *))))', '(parameter 1 (return (member update (return (member getModel *)))))', '(parameter 1 (return (member update (member model (global)))))', '(parameter 0 (return (member update (member model (global)))))', '(parameter 0 (return (member findOne (parameter 0 (member findEntityAndPushTeam *)))))', '(parameter 1 (return (member findOneAndUpdate (member deltaPrice *))))', '(parameter 0 (return (member findOne (member GraphModel *))))', '(parameter 0 (return (member find (member student *))))', '(parameter 0 (return (member findOneAndUpdate (member Skin *))))', '(parameter 0 (return (member remove (member advisor *))))', '(parameter 0 (return (member remove (member class *))))', '(parameter 0 (return (member deleteOne (member Node *))))', '(parameter 0 (return (member remove (member student *))))', '(parameter 1 (return (member findOneAndUpdate (member categorys *))))', '(parameter 0 (return (member countDocuments (member CnameModel *))))', '(parameter 0 (return (member find (member Circuit *))))', '(parameter 1 (return (member updateMany (parameter 0 (member updateMany *)))))', '(parameter 0 (return (member remove (member Playlist (global)))))', '(parameter 0 (return (member countDocuments (member txtModel *))))', '(parameter 1 (return (member update (member root *))))', '(parameter 0 (return (member update (member Circuit *))))', '(parameter 0 (return (member update (member checksheet *))))', '(parameter 1 (return (member update (member class *))))', '(parameter 0 (return (member findOne (member Stat *))))', '(parameter 0 (return (member findOne (member WhoisModel *))))', '(parameter 0 (return (member find (parameter spielModel (member sortTeams *)))))', '(parameter 1 (return (member findOneAndUpdate (member feeExpress *))))', '(parameter 0 (return (member updateMany (parameter Obj *))))', '(parameter 0 (return (member findOne (member GraphLinksModel *))))', '(parameter 1 (return (member distinct (member CertTransModel *))))', '(parameter 0 (return (parameter 0 (return (member TeamAddZwischengruppe *)))))', '(parameter 0 (return (member deleteOne (member User *))))', '(parameter 1 (return (member update (member Play (global)))))', '(parameter 0 (return (member findOne (member GraphDataModel *))))', '(parameter 0 (return (member findOneAndUpdate (member feeExpress *))))', '(parameter 0 (return (member find (member model (global)))))', '(parameter 1 (return (member findOneAndUpdate (member feeExpressCountry *))))', '(parameter 1 (return (member update (member BookItem *))))', '(parameter 1 (return (member update (member Room *))))', '(parameter 0 (return (member update (parameter business *))))', '(parameter 1 (return (member update (member User *))))', '(parameter 1 (return (member update (member banners *))))', '(parameter 0 (return (member findOneAndRemove (member Node *))))', '(parameter 1 (return (member findByIdAndUpdate (return (member getModel *)))))', '(parameter 1 (return (member update (parameter clientt *))))', '(parameter 0 (return (member findOne (member Ipv6ZoneModel *))))', '(parameter 0 (return (member find (member Customer *))))', '(parameter 0 (return (member findOne (member Usage *))))', '(parameter 0 (return (member remove (parameter model (member removeEntityBy *)))))', '(parameter 0 (return (member find (member SwixerNodes *))))', '(parameter 0 (return (member findOneAndUpdate (member deltaPrice *))))', '(parameter 0 (return (member findOne (member TPDModel *))))', '(parameter 0 (return (member update (member Statistic *))))', '(parameter 0 (return (member remove (member suppliers *))))', '(parameter 0 (return (member remove (member feeExpress *))))', '(parameter 0 (return (member findOneAndUpdate (member Swap *))))', '(parameter 0 (return (member update (member Room *))))', '(parameter 0 (return (member update (member Validation *))))', '(parameter 0 (return (member findOneAndRemove (member Usage *))))', '(parameter 0 (return (member update (parameter client *))))', '(parameter 0 (return (member findOneAndRemove (member Book *))))', '(parameter 0 (return (member find (member countryFlags *))))', '(parameter 0 (return (member findOne (member Validation *))))', '(parameter 0 (return (member find (member feeCountrys *))))', '(parameter 0 (return (member count (member Room (global)))))', '(parameter 0 (return (member aggregate (member DeadDnsModel *))))', '(parameter 0 (return (member findOne (member GroupModel *))))', '(parameter 0 (return (member findOne (member Swixes *))))', '(parameter 0 (return (member findOneAndUpdate (member feeExpressCountry *))))', '(parameter 1 (return (member findByIdAndUpdate (member Device *))))', '(parameter 1 (return (member update (member suppliers *))))', '(parameter 0 (return (member findOne (member checksheet *))))', '(parameter 1 (return (member update (member block *))))', '(parameter 1 (return (member update (member countryFlags *))))', '(parameter 0 (return (member findOneAndUpdate (member fee *))))', '(parameter 0 (return (member update (parameter advertisement *))))', '(parameter 0 (return (member aggregate (member products (global)))))', '(parameter 0 (return (member findOneAndRemove (member SwixerNodes *))))', '(parameter 0 (return (member update (member class *))))', '(parameter 0 (return (member update (member Payment *))))', '(parameter 0 (return (member countDocuments (member ZoneModel *))))', '(parameter 0 (return (member update (member suppliers *))))', '(parameter 0 (return (member remove (member root *))))', '(parameter 0 (return (member count (member Artist (global)))))', '(parameter 0 (return (member find (member IpZoneModel *))))', '(parameter 1 (return (member findOneAndUpdate (member Swap *))))', '(parameter 0 (return (member findOneAndUpdate (member suppliers *))))', '(parameter 0 (return (member update (member department *))))', '(parameter 0 (return (member find (member feeExpressCountry *))))', '(parameter 0 (return (member find (member Ipv6ZoneModel *))))', '(parameter 0 (return (member findOne (member Swap *))))', '(parameter 0 (return (member findOneAndRemove (member BookItem *))))', '(parameter 1 (return (member update (member Statistic *))))', '(parameter 0 (return (member countDocuments (member mxModel *))))', '(parameter 0 (return (member findOne (member GraphDocsModel *))))', '(parameter 1 (return (member findOneAndUpdate (member fee *))))', '(parameter 0 (return (member countDocuments (member IPAddrModel *))))', '(parameter 0 (return (member findOne (member IpZoneModel *))))', '(parameter 0 (return (member findOne (member VirustotalModel *))))', '(parameter 0 (return (member update (member banners *))))', '(parameter 1 (return (member findOneAndUpdate (member Skin *))))', '(parameter 1 (return (member update (parameter Obj (member update *)))))', '(parameter 0 (return (member remove (member BookItem *))))', '(parameter 1 (return (member findOneAndUpdate (member suppliers *))))', '(parameter 0 (return (member countDocuments (member IpZoneModel *))))', '(parameter 0 (return (member deleteMany (return (member model *)))))', '(parameter 0 (return (member countDocuments (member VirustotalModel *))))', '(parameter 1 (return (member update (member department *))))', '(parameter 0 (return (member update (parameter question *))))', '(parameter 0 (return (member update (member Request *))))', '(parameter 0 (return (member remove (member department *))))', '(parameter 0 (return (member find (member SEOS *))))', '(parameter 0 (return (member countDocuments (member GraphModel *))))', '(parameter 0 (return (member findOne (member CertGraphModel *))))', '(parameter 0 (return (member findOne (member feeExpressCountry *))))', '(parameter 0 (return (member findOne (member Free *))))', '(parameter 0 (return (member update (member BookItem *))))', '(parameter 0 (return (member update (member systems *))))', '(parameter 0 (return (member remove (member fee *))))', '(parameter 0 (return (member update (member root *))))', '(parameter 0 (return (member update (member Customer *))))', '(parameter 0 (return (member aggregate (member randaddrs (global)))))', '(parameter 1 (return (member update (member checksheet *))))', '(parameter 0 (return (member countDocuments (member GraphDataModel *))))', '(parameter 0 (return (member update (member User *))))', '(parameter 0 (return (member countDocuments (member ipv6AddrModel *))))', '(parameter 0 (return (member countDocuments (member HostModel *))))', '(parameter 0 (return (member update (member block *))))', '(parameter 1 (return (member update (member Chat (global)))))', '(parameter 0 (return (member findOneAndUpdate (member categorys *))))', '(parameter 0 (return (member findOne (member root *))))', '(parameter 0 (return (member update (member countryFlags *))))', '(member 0 (parameter hierarchy (parameter 0 (return (member exec *)))))', '(parameter 1 (return (member update (member Validation *))))', '(parameter 0 (return (member find (member ModelUser *))))', '(parameter 1 (return (member update (member specifications *))))', '(parameter 0 (return (member aggregate (member zgrab2_80_model *))))', '(parameter 0 (return (member getIBTXTByRegex *)))', '(parameter 0 (return (member getIBHostByIPPromise *)))', '(parameter 1 (return (member update (member feeCountrys *))))', '(parameter 0 (return (member findOne (member Traffic *))))', '(parameter 0 (return (member deleteOne (member Service *))))', '(parameter 0 (return (member update (member feeCountrys *))))', '(parameter 0 (return (member findOne (member StudentModel *))))', '(parameter 0 (return (member update (member Traffic *))))', '(parameter 0 (return (member aggregate (member extattrModel *))))', '(parameter 0 (return (member count (member Skin *))))', '(parameter 0 (return (member update (member specifications *))))', '(parameter 0 (return (member update (member Room (global)))))', '(parameter 0 (return (member aggregate (member model *))))', '(parameter 0 (return (member deleteOne (member Request *))))', '(parameter 0 (return (member findOneAndUpdate (member specifications *))))', '(parameter 0 (return (member aggregate (member Node *))))', '(parameter 0 (return (member deleteOne (member Customer *))))', '(parameter 0 (return (member findOne (parameter User *))))', '(parameter 1 (return (member findByIdAndUpdate (return (member model *)))))', '(parameter 0 (return (member find (member GroupModel *))))', '(parameter 0 (return (member deleteOne (member Device *))))', '(parameter 0 (return (member remove (member feeExpressCountry *))))', '(parameter 0 (return (member aggregate (member zgrab80Model *))))', '(parameter 0 (return (member remove (member categorys *))))', '(parameter 0 (return (member findOne (member ZoneModel *))))', '(parameter 1 (return (member findOneAndUpdate (member StudentModel *))))', '(parameter 0 (return (member find (member ZoneModel *))))', '(parameter 0 (return (member getIBHostByIPRangePromise *)))', '(parameter 0 (return (member countDocuments (member DeadDnsModel *))))', '(parameter 0 (return (member aggregate (member censysModel *))))', '(parameter 1 (return (member findOneAndUpdate (member specifications *))))', '(parameter 0 (return (member aggregate (member Payment *))))', '(parameter 0 (return (member find (member Swap *))))', '(parameter 1 (return (member update (member Room (global)))))', '(parameter 0 (return (member remove (member Post *))))', '(parameter 0 (return (member findOneAndUpdate (member StudentModel *))))', '(parameter 0 (return (member find (member Request *))))', '(parameter 0 (return (member find (member UserModel *))))', '(parameter 0 (return (parameter 0 (return (member reloadAnmeldeObjects *)))))', '(parameter 1 (return (member update (member Traffic *))))', '(parameter 0 (return (member find (member Device *))))', '(parameter 0 (return (member findOne (member user *))))', '(parameter 0 (return (member deleteOne (member Circuit *))))', '(parameter 0 (return (member aggregate (member AllDnsModel *))))', '(parameter 0 (return (member find (member Service *))))', '(parameter 0 (return (member findOne (member CertTransModel *))))', '(parameter 0 (return (member find (member ModelVote *))))', '(parameter 0 (return (member find (member Post *))))', '(parameter 0 (return (member findOne (member products *))))', '(parameter 0 (return (member findOneAndRemove (member StudentModel *))))', '(parameter 0 (return (member countDocuments (member AllDnsModel *))))', '(parameter 0 (return (member getOrders (member methods *))))', '(parameter 0 (return (member find (member Connection *))))', '(parameter 0 (return (parameter 0 (return (member removeZwischenGruppen *)))))', '(parameter 0 (return (member find (member specifications *))))', '(parameter 0 (return (member findOne (member specifications *))))', '(parameter 0 (return (member findOne (member advisor *))))', '(member setting (member body (parameter req *)))', '(parameter 1 (return (member findOneAndUpdate (member systems *))))', '(parameter 0 (return (member findOne (member CIDR_graphModel *))))', '(parameter 0 (return (member findOne (member Book *))))', '(parameter 0 (return (member find (member user *))))', '(parameter 0 (return (member findOne (return (member getModel *)))))', '(parameter 1 (return (member update (member model *))))', '(parameter 0 (return (member findOne (member Connection *))))', '(parameter 1 (return (member findOneAndUpdate (member SwixerNodes *))))', '(parameter 0 (return (member findOneAndUpdate (member SwixerNodes *))))', '(parameter 0 (return (member update (parameter user *))))', '(member body (parameter req (parameter 1 (return (member patch *)))))', '(parameter 0 (return (parameter 0 (return (member removeZwischenRundenGruppe *)))))', '(parameter 0 (return (member update (parameter category *))))', '(member query (parameter 0 (parameter 2 (return (member get *)))))', '(parameter 0 (return (member find (member block *))))', '(parameter 0 (return (member find (member uploadTemporarys *))))', '(parameter 0 (return (parameter 0 (return (member deleteNotCompletedSpiele *)))))', '(parameter 0 (return (member findOneAndUpdate (member products *))))', '(parameter 0 (return (member find (member extattrModel *))))', '(parameter 0 (return (member aggregate (member Skin *))))', '(parameter 0 (return (member getIBMXByMailExchanger *)))', '(parameter 0 (return (member count (member Play (global)))))', '(parameter 0 (return (member remove (member users *))))', '(parameter 0 (return (member count (member Person (global)))))', '(parameter 0 (return (member find (member Book *))))', '(parameter 0 (return (member find (member Room (global)))))', '(parameter 0 (return (member find (member feeExpress *))))', '(parameter 0 (return (member find (member advisor *))))', '(parameter 0 (return (member findOne (member TPD_graphModel *))))', '(parameter 0 (return (member findOne (member banners *))))', '(parameter 0 (return (member update (member model *))))', '(parameter 0 (return (member find (member BookItem *))))', '(parameter 1 (return (member findOneAndUpdate (member products *))))', '(parameter 0 (return (member find (member mxModel *))))', '(parameter 0 (return (member findOne (member UserModel *))))', '(parameter 0 (return (member findOne (member student *))))', '(parameter 0 (return (member findOne (member SwixerNodes *))))', '(parameter 1 (return (member update (member categorys *))))', '(parameter 0 (return (member update (member Book *))))', '(parameter 1 (return (member update (member Book *))))', '(parameter 0 (return (member findOne (member Post *))))', '(parameter 0 (return (member find (member suppliers *))))', '(parameter 0 (return (member findOne (member Request *))))', '(parameter 0 (return (member findOne (member Room (global)))))', '(parameter 0 (return (member find (member ModelComment *))))', '(parameter 0 (return (member find (member checksheet *))))', '(parameter 0 (return (member or (return (member find *)))))', '(parameter 0 (return (member update (parameter admin *))))', '(parameter 1 (return (member update (member user *))))', '(parameter 0 (return (member find (member txtModel *))))', '(parameter 0 (return (member update (member user *))))', '(parameter 0 (return (member find (member CnameModel *))))', '(parameter 0 (return (member aggregate (member Statistic *))))', '(parameter 0 (return (member update (member categorys *))))', '(parameter 1 (return (member update (member student *))))', '(parameter 0 (return (member update (return (member find *)))))', '(parameter 0 (return (member count (member Account *))))', '(parameter 0 (return (member update (member student *))))', '(parameter 1 (return (member update (member Post *))))', '(parameter 0 (return (member find (member HostModel *))))', '(parameter 0 (return (member find (member ModelMarker *))))', '(parameter 0 (return (member countDocuments (member zgrab80Model *))))', '(parameter 0 (return (member find (member RdnsModel *))))', '(parameter 0 (return (member findOne (member Playlist (global)))))', '(parameter 0 (return (member find (member Node *))))', '(parameter 0 (return (member findOne (member Node *))))', '(parameter 0 (return (member find (member TPDModel *))))', '(parameter 0 (return (member findOne (member users *))))', '(parameter 0 (return (member find (member ipv6AddrModel *))))', '(parameter 0 (return (member find (member Chat (global)))))', '(parameter 0 (return (member findOne (member Service *))))', '(parameter 0 (return (member update (member Post *))))', '(parameter 0 (return (member findOne (parameter model *))))', '(parameter 0 (return (member countDocuments (member zgrab2_80_model *))))', '(parameter 0 (return (member find (member IPAddrModel *))))', '(parameter 0 (return (member remove (member specifications *))))', '(parameter 1 (return (member findOneAndUpdate (member de_notices *))))', '(parameter 0 (return (member update (member advisor *))))', '(parameter 0 (return (member find (member Person (global)))))', '(parameter 0 (return (member find (member User *))))', '(parameter 0 (return (member countDocuments (member censysModel *))))', '(parameter 0 (return (member find (member banners *))))', '(parameter 0 (return (member findOne (member Customer *))))', '(member body (parameter 0 (parameter 2 (return (member put *)))))', '(parameter 1 (return (member update (member advisor *))))', '(parameter 1 (return (member findOneAndUpdate (member notices *))))', '(parameter 0 (return (member getDistinctUnknownHttpHeaderPromise *)))', '(parameter 0 (return (member find (member WhoisModel *))))', '(parameter 0 (return (member countDocuments (member WhoisModel *))))', '(parameter 0 (return (member findOne (member Circuit *))))', '(parameter 0 (return (member find (member Play (global)))))', '(parameter 0 (return (member find (return (member getModel *)))))', '(parameter 0 (return (member find (parameter model *))))', '(parameter 1 (return (parameter 0 (return (member getSettings *)))))', '(parameter 0 (return (member findOne (member Device *))))', '(parameter 0 (return (member find (member Playlist (global)))))', '(parameter 0 (return (member aggregate (return (member model *)))))', '(parameter 0 (return (member find (member DeadDnsModel *))))', '(parameter 0 (return (member findOneAndRemove (return (member model *)))))', '(parameter 0 (return (member findOne (member Room *))))', '(parameter 1 (return (member distinct (return (member collection *)))))', '(parameter 0 (return (member findOne (member Skin *))))', '(parameter 0 (return (member aggregate (member Play (global)))))', '(parameter 0 (return (member find (member users *))))', '(parameter 0 (return (member aggregate (member Connection *))))', '(parameter 0 (return (member find (member products *))))', '(parameter 0 (return (member countDocuments (member zgrab443Model *))))', '(parameter 0 (return (member find (member model *))))', '(parameter 0 (return (member findOne (member Account *))))', '(parameter 0 (return (member countDocuments (member zgrab2_443_model *))))', '(parameter 0 (return (member find (member AllDnsModel *))))', '(parameter 0 (return (member findOne (member User *))))', '(parameter 1 (return (member findOneAndUpdate (return (member collection *)))))', '(parameter 0 (return (member findOneAndUpdate (return (member collection *)))))', '(parameter 0 (return (member find (member zgrab2_80_model *))))', '(parameter 1 (return (member update (member users *))))', '(parameter 0 (return (member find (member zgrab80Model *))))', '(parameter 0 (return (member countDocuments (member CertTransModel *))))', '(parameter 0 (return (member find (member Track (global)))))', '(parameter 0 (return (member update (member users *))))', '(parameter 1 (return (parameter 1 (return (member post *)))))', '(parameter 0 (return (member findOne (member categorys *))))', '(parameter 0 (return (member findOne (member Artist (global)))))', '(parameter 0 (return (member findOne (member Person (global)))))', '(parameter 0 (return (member aggregate (return (member collection *)))))', '(parameter 0 (return (member find (member CertTransModel *))))', '(parameter 0 (return (member count (return (member collection *)))))', '(parameter 0 (return (member findOneAndUpdate (return (member model *)))))', '(parameter 1 (return (member findOneAndUpdate (return (member model *)))))', '(parameter 0 (return (member find (member categorys *))))', '(parameter 0 (return (member find (member AllIPsModel *))))', '(parameter 0 (return (member aggregate (member zgrab2_443_model *))))', '(parameter 0 (return (member find (member VirustotalModel *))))', '(parameter 0 (return (member aggregate (member zgrab443Model *))))', '(member body (parameter 0 (parameter 2 (return (member post *)))))', '(parameter 1 (return (member updateMany *)))', '(parameter 0 (return (member findOne (member Track (global)))))', '(parameter 0 (return (member updateMany *)))', '(parameter 0 (return (member deleteOne *)))', '(parameter 0 (return (parameter 0 (return (member getSettings *)))))', '(parameter 0 (return (member find (member zgrab2_443_model *))))', '(parameter 0 (return (member find (member zgrab443Model *))))', '(parameter 1 (return (member updateOne (return (member collection *)))))', '(parameter 1 (return (member update (return (member collection *)))))', '(parameter 0 (return (member updateOne (return (member collection *)))))', '(parameter 0 (return (member update (return (member collection *)))))', '(parameter 0 (return (member where (return (member find *)))))', '(parameter 0 (return (member remove (return (member collection *)))))', '(parameter 0 (return (parameter 2 (return (member post *)))))', '(parameter 0 (return (member find (member censysModel *))))', '(parameter 0 (return (member find (member zgrabPortModel *))))', '(parameter 0 (return (member find (member zgrab2PortModel *))))', '(parameter 1 (return (member updateOne *)))', '(member query (parameter req (parameter 1 (return (member get *)))))', '(member body (parameter 0 (parameter 1 (return (member put *)))))', '(parameter 0 (return (member updateOne *)))', '(parameter 1 (return (member findByIdAndUpdate *)))', '(parameter 0 (return (member findOneAndRemove *)))', '(parameter 0 (return (member count (return (member model *)))))', '(parameter 0 (return (member update (return (member model *)))))', '(parameter 1 (return (member update (return (member model *)))))', '(parameter 1 (return (member distinct *)))', '(parameter 0 (return (member find (return (member collection *)))))', '(parameter 0 (return (member countDocuments *)))', '(parameter 0 (return (member findOne (return (member collection *)))))', '(parameter 0 (return (parameter 1 (return (member get *)))))', '(parameter 1 (return (parameter 0 (return (member exec *)))))', '(parameter 0 (return (parameter 1 (return (member post *)))))', '(member body (parameter req (parameter 1 (return (member post *)))))', '(parameter 0 (return (member remove (return (member model *)))))', '(parameter 0 (return (member findOne (return (member model *)))))', '(parameter 0 (return (member aggregate *)))', '(parameter 0 (return (member count *)))', '(parameter 1 (return (member findOneAndUpdate *)))', '(parameter 0 (return (member findOneAndUpdate *)))', '(parameter 0 (return (parameter 0 (return (member run *)))))', '(parameter 0 (return (member find (return (member find *)))))', '(parameter 0 (return (parameter 1 (return (member findOne *)))))', '(parameter 0 (return (parameter 0 (return (member exec *)))))', '(parameter 0 (return (member find (return (member model *)))))', '(parameter 1 (return (member update *)))', '(parameter 0 (return (member findOne *)))', '(parameter 0 (return (member update *)))', '(parameter 0 (return (member remove *)))', '(parameter 0 (return (member find *)))']
#tmp = ['(parameter 0 (return (member find (member feeCountrys *))))', '(parameter 0 (return (member find (member model (global)))))', '(parameter 0 (return (member find (member student *))))', '(parameter 0 (return (member find (member feeExpressCountry *))))', '(parameter 0 (return (member find (member IpZoneModel *))))', '(parameter 0 (return (member find (member countryFlags *))))', '(parameter 0 (return (member find (member Ipv6ZoneModel *))))', '(parameter 0 (return (member find (member model (member user *)))))', '(parameter 0 (return (member find (member Skin *))))', '(parameter 1 (return (member distinct (return (member model *)))))', '(parameter 0 (return (member count (member Artist (global)))))', '(parameter 0 (return (member find (parameter 2 (member sortTeams *)))))', '(parameter 0 (return (member count (member Room (global)))))', '(parameter 0 (return (member find (member SwixerNodes *))))', '(parameter 0 (return (member find (member Circuit *))))', '(parameter 0 (return (member find (member Customer *))))', '(parameter 0 (return (member find (member SEOS *))))', '(parameter 0 (return (member find (member ModelUser *))))', '(parameter 0 (return (member find (member Request *))))', '(parameter 0 (return (member find (member ZoneModel *))))', '(parameter 0 (return (member getIBHostByIPPromise *)))', '(parameter 0 (return (member find (member Device *))))', '(parameter 0 (return (member count (member Skin *))))', '(parameter 0 (return (parameter 0 (return (member reloadAnmeldeObjects *)))))', '(parameter 0 (return (member find (member ModelVote *))))', '(parameter 0 (return (member find (member UserModel *))))', '(parameter 0 (return (member find (member GroupModel *))))', '(parameter 0 (return (member getIBTXTByRegex *)))', '(parameter 0 (return (member getIBHostByIPRangePromise *)))', '(parameter 0 (return (member find (member Swap *))))', '(parameter 0 (return (member find (member Post *))))', '(parameter 0 (return (member find (member Service *))))', '(parameter 0 (return (parameter 0 (return (member removeZwischenRundenGruppe *)))))', '(parameter 0 (return (member find (member Connection *))))', '(parameter 0 (return (member find (member Book *))))', '(member query (parameter req (parameter 2 (return (member get *)))))', '(parameter 0 (return (member find (member specifications *))))', '(parameter 0 (return (member find (member extattrModel *))))', '(parameter 0 (return (member find (member feeExpress *))))', '(parameter 0 (return (member find (member uploadTemporarys *))))', '(parameter 0 (return (member find (member Room (global)))))', '(parameter 0 (return (member find (member advisor *))))', '(parameter 0 (return (member getIBMXByMailExchanger *)))', '(parameter 0 (return (member find (member block *))))', '(parameter 0 (return (member getOrders (member methods *))))', '(parameter 0 (return (member find (member BookItem *))))', '(parameter 0 (return (member find (member user *))))', '(parameter 0 (return (member count (member Person (global)))))', '(parameter 0 (return (member count (member Play (global)))))', '(parameter 0 (return (member find (member txtModel *))))', '(parameter 0 (return (member count (member Account *))))', '(parameter 0 (return (member find (member suppliers *))))', '(parameter 0 (return (member find (member CnameModel *))))', '(parameter 0 (return (member find (member ModelComment *))))', '(parameter 0 (return (member find (member mxModel *))))', '(parameter 0 (return (member find (member checksheet *))))', '(parameter 0 (return (member find (member Chat (global)))))', '(parameter 0 (return (member find (member RdnsModel *))))', '(parameter 0 (return (member find (member TPDModel *))))', '(parameter 0 (return (member find (member IPAddrModel *))))', '(parameter 0 (return (member find (member ipv6AddrModel *))))', '(parameter 0 (return (member find (member ModelMarker *))))', '(parameter 0 (return (member find (member HostModel *))))', '(parameter 0 (return (member find (member Node *))))', '(parameter 0 (return (member find (member WhoisModel *))))', '(parameter 0 (return (member find (member User *))))', '(parameter 0 (return (member find (member Person (global)))))', '(parameter 0 (return (member find (member banners *))))', '(parameter 0 (return (member find (parameter model *))))', '(parameter 0 (return (member find (member Play (global)))))', '(parameter 0 (return (member find (return (member getModel *)))))', '(parameter 0 (return (member find (member Playlist (global)))))', '(parameter 0 (return (member find (member DeadDnsModel *))))', '(parameter 1 (return (member distinct (return (member collection *)))))', '(parameter 0 (return (member find (member users *))))', '(parameter 0 (return (member find (member AllDnsModel *))))', '(parameter 0 (return (member find (member products *))))', '(parameter 0 (return (member find (member model *))))', '(parameter 0 (return (member find (member zgrab2_80_model *))))', '(parameter 0 (return (member find (member zgrab80Model *))))', '(parameter 0 (return (member find (member Track (global)))))', '(parameter 0 (return (member find (member CertTransModel *))))', '(parameter 0 (return (member find (member categorys *))))', '(parameter 0 (return (member find (member AllIPsModel *))))', '(parameter 0 (return (member find (member VirustotalModel *))))', '(parameter 0 (return (member find (member zgrab2_443_model *))))', '(parameter 0 (return (member find (member zgrab443Model *))))', '(parameter 0 (return (member find (member censysModel *))))', '(parameter 0 (return (member find (member zgrabPortModel *))))', '(parameter 0 (return (member find (member zgrab2PortModel *))))', '(member query (parameter req (parameter 1 (return (member get *)))))', '(parameter 0 (return (member count (return (member model *)))))', '(parameter 1 (return (member distinct *)))', '(parameter 0 (return (member find (return (member collection *)))))', '(parameter 0 (return (parameter 1 (return (member get *)))))', '(member body (parameter req (parameter 1 (return (member post *)))))', '(parameter 0 (return (member count *)))', '(parameter 0 (return (parameter 0 (return (member run *)))))', '(parameter 0 (return (parameter 1 (return (member findOne *)))))', '(parameter 0 (return (member find (return (member model *)))))', '(parameter 0 (return (member find *)))']

#print("events", len(set(alldf[alldf["reps"].isin(tmp)]["dfnode"])))
#print("events", len(set(alldf[alldf["reps"].isin(all_reps)]["dfnode"])))

#print(alldf[alldf["score"] > 0][""])
#print("all events", len(set(alldf[alldf["isnosql"] == True]["dfnode"])))
#exit(0)


#all_reps_tmp = alldf[["dfnode", "reps"]].groupby(["reps"])["dfnode"].count().reset_index(name='count').sort_values(['count'],ascending=False)
all_reps_count = alldf.groupby(['reps']).size().reset_index(name='counts').set_index("reps")
print("sorted1")
#counts = list(alldf[["dfnode", "reps"]].groupby(["reps"])["dfnode"].count().reset_index(name='count').sort_values(['count'],ascending=False)["count"])
#all_reps = sorted(all_reps, key=lambda x: len(alldf[alldf["reps"] == x]))
all_reps = sorted(all_reps, key=lambda x: all_reps_count.loc[x]['counts'])
print("sorted2")
covered_events = []
total_events = 0
covered_reps = []
target_events =  len(set(alldf[alldf["isnosql"] == True]["dfnode"]))

print("executing algo")
# greedy algo
for r in all_reps:
    events_covered = alldf[(alldf["reps"].eq(r)) & (alldf["isnosql"] == True)]["dfnode"]
    new_events = list(set(events_covered).difference(set(covered_events)))
    if len(new_events) > 0 :
        outside_events = alldf[(alldf["reps"].eq(r)) & (alldf["isnosql"] == False)]["dfnode"]
        if len(outside_events) > 0:
            print("Ignoring ", r)
        else:
            covered_events = covered_events + new_events
            covered_reps = covered_reps + [r]
            #total_events += len(alldf[alldf["reps"] == r])
            print(r, len(new_events),len(covered_events))
    if len(covered_events) >= target_events:
        break
print("No sql events", target_events)
print("Covered events {0}/{1}".format(len(covered_events), total_events))
print("Covered reps {0}/{1}".format(len(covered_reps), len(all_reps) ))
print(covered_reps)
